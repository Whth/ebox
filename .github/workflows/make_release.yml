name: CI

on:
  push:
    branches:
      - master

jobs:
  check-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep '^version' Cargo.toml | cut -d '"' -f 2)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Check if version has changed
        id: check_version_change
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 || true)
          echo "Latest tag is $LATEST_TAG"
          echo "Current version is ${{ steps.get_version.outputs.CURRENT_VERSION }}"
          if [ -n "$LATEST_TAG" ]; then
            LATEST_VERSION=${LATEST_TAG#v}
            if [ "$LATEST_VERSION" != "${{ steps.get_version.outputs.CURRENT_VERSION }}" ]; then
              echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
            else
              echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No tags found, assuming first release."
            echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
          fi
        shell: bash


      - name: Build binaries
        if: ${{ steps.check_version_change.outputs.VERSION_CHANGED == 'true' }}
        run: |
          cargo build --release
          
          (cd target/release && zip -r ../../ebox_v${{ steps.get_version.outputs.CURRENT_VERSION }}.zip . -i *.exe)
        shell: bash

      - name: Create Release and upload assets
        if: ${{ steps.check_version_change.outputs.VERSION_CHANGED == 'true' }}
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.get_version.outputs.CURRENT_VERSION }}"
          name: "v${{ steps.get_version.outputs.CURRENT_VERSION }}"
          files: |
            ebox_v${{ steps.get_version.outputs.CURRENT_VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}